// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id   String  @id @default(uuid()) @map("_id")
  name String?

  email String? @unique
  otp   String?
  role  String  @default("admin")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String  @id @default(uuid()) @map("_id")
  mobileNumber String  @unique
  name         String?

  email String? @unique
  otp   String?
  role  String  @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wishlists Wishlist[]
  cart      Cart[]
}

model Seller {
  id String @id @default(uuid()) @map("_id")

  name String?

  mobileNumber String  @unique
  email        String  @unique
  otp          String?
  role         String  @default("Seller")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Sellers Store[] @relation("SellerToStore")
}

// store
model Store {
  id String @id @default(uuid()) @map("_id")

  storeName        String
  storeAddress     String
  storeLat         Float  @default(28.61)
  storeLng         Float  @default(77.23)
  storeUPI         String
  storeMobile      String @unique
  storeDescription String @default("A store")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  SellerId  String
  seller    Seller   @relation("SellerToStore", fields: [SellerId], references: [id])

  coverUrl   String      @default("https://res.cloudinary.com/drz5akzu1/image/upload/v1729718405/mschk1pmmng6nqnlzl32.jpg")
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
}

model Billboard {
  id         String     @id @default(uuid()) @map("_id")
  storeId    String
  Store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id          String    @id @default(uuid()) @map("_id")
  storeId     String
  Store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id String @id @default(uuid()) @map("_id")

  storeId String
  Store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  name        String
  price       Int
  description String
  quantity    Int
  isFeatured  Boolean @default(false)
  isArchived  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images    Image[]
  wishlists Wishlist[]
  cart      Cart[]
}

model Image {
  id String @id @default(uuid()) @map("_id")

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String @id @default(uuid()) @map("_id")
  userId    String
  productId String

  // Relations to User and Product
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // constraint so that combination of productId and userId is unique for a wishlist entry
  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Cart {
  id        String @id @default(uuid()) @map("_id")
  userId    String
  productId String

  // Relations to User and Product
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // constraint so that combination of productId and userId is unique for a wishlist entry
  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Newsletter {
  id           String   @id @default(uuid()) @map("_id")
  email        String   @unique
  name         String
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true)

  @@map("newsletter")
}


model Question {
  id        String    @id @default(cuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[]  @relation("QuestionAnswers")
  answered  Boolean   @default(false)
}

model Answer {
  id        String    @id @default(cuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  questionId String  
  question  Question @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade) // Moved onDelete: Cascade to this side
}
